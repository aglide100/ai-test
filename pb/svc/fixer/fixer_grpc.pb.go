// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pb/svc/fixer/fixer.proto

package fixer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FixerService_MakingNewJob_FullMethodName = "/FixerService/MakingNewJob"
	FixerService_GetResult_FullMethodName    = "/FixerService/GetResult"
	FixerService_GetBlob_FullMethodName      = "/FixerService/GetBlob"
	FixerService_SendBlob_FullMethodName     = "/FixerService/SendBlob"
	FixerService_CheckClients_FullMethodName = "/FixerService/CheckClients"
)

// FixerServiceClient is the client API for FixerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FixerServiceClient interface {
	MakingNewJob(ctx context.Context, in *MakingNewJobReq, opts ...grpc.CallOption) (*MakingNewJobRes, error)
	GetResult(ctx context.Context, in *GetResultReq, opts ...grpc.CallOption) (*GetResultRes, error)
	GetBlob(ctx context.Context, in *GetBlobReq, opts ...grpc.CallOption) (*GetBlobRes, error)
	SendBlob(ctx context.Context, in *SendBlobReq, opts ...grpc.CallOption) (*SendBlobRes, error)
	CheckClients(ctx context.Context, in *CheckClientsReq, opts ...grpc.CallOption) (*CheckClientsRes, error)
}

type fixerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFixerServiceClient(cc grpc.ClientConnInterface) FixerServiceClient {
	return &fixerServiceClient{cc}
}

func (c *fixerServiceClient) MakingNewJob(ctx context.Context, in *MakingNewJobReq, opts ...grpc.CallOption) (*MakingNewJobRes, error) {
	out := new(MakingNewJobRes)
	err := c.cc.Invoke(ctx, FixerService_MakingNewJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixerServiceClient) GetResult(ctx context.Context, in *GetResultReq, opts ...grpc.CallOption) (*GetResultRes, error) {
	out := new(GetResultRes)
	err := c.cc.Invoke(ctx, FixerService_GetResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixerServiceClient) GetBlob(ctx context.Context, in *GetBlobReq, opts ...grpc.CallOption) (*GetBlobRes, error) {
	out := new(GetBlobRes)
	err := c.cc.Invoke(ctx, FixerService_GetBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixerServiceClient) SendBlob(ctx context.Context, in *SendBlobReq, opts ...grpc.CallOption) (*SendBlobRes, error) {
	out := new(SendBlobRes)
	err := c.cc.Invoke(ctx, FixerService_SendBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fixerServiceClient) CheckClients(ctx context.Context, in *CheckClientsReq, opts ...grpc.CallOption) (*CheckClientsRes, error) {
	out := new(CheckClientsRes)
	err := c.cc.Invoke(ctx, FixerService_CheckClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FixerServiceServer is the server API for FixerService service.
// All implementations must embed UnimplementedFixerServiceServer
// for forward compatibility
type FixerServiceServer interface {
	MakingNewJob(context.Context, *MakingNewJobReq) (*MakingNewJobRes, error)
	GetResult(context.Context, *GetResultReq) (*GetResultRes, error)
	GetBlob(context.Context, *GetBlobReq) (*GetBlobRes, error)
	SendBlob(context.Context, *SendBlobReq) (*SendBlobRes, error)
	CheckClients(context.Context, *CheckClientsReq) (*CheckClientsRes, error)
	mustEmbedUnimplementedFixerServiceServer()
}

// UnimplementedFixerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFixerServiceServer struct {
}

func (UnimplementedFixerServiceServer) MakingNewJob(context.Context, *MakingNewJobReq) (*MakingNewJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakingNewJob not implemented")
}
func (UnimplementedFixerServiceServer) GetResult(context.Context, *GetResultReq) (*GetResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedFixerServiceServer) GetBlob(context.Context, *GetBlobReq) (*GetBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedFixerServiceServer) SendBlob(context.Context, *SendBlobReq) (*SendBlobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlob not implemented")
}
func (UnimplementedFixerServiceServer) CheckClients(context.Context, *CheckClientsReq) (*CheckClientsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClients not implemented")
}
func (UnimplementedFixerServiceServer) mustEmbedUnimplementedFixerServiceServer() {}

// UnsafeFixerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FixerServiceServer will
// result in compilation errors.
type UnsafeFixerServiceServer interface {
	mustEmbedUnimplementedFixerServiceServer()
}

func RegisterFixerServiceServer(s grpc.ServiceRegistrar, srv FixerServiceServer) {
	s.RegisterService(&FixerService_ServiceDesc, srv)
}

func _FixerService_MakingNewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakingNewJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixerServiceServer).MakingNewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FixerService_MakingNewJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixerServiceServer).MakingNewJob(ctx, req.(*MakingNewJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixerService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixerServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FixerService_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixerServiceServer).GetResult(ctx, req.(*GetResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixerService_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixerServiceServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FixerService_GetBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixerServiceServer).GetBlob(ctx, req.(*GetBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixerService_SendBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBlobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixerServiceServer).SendBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FixerService_SendBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixerServiceServer).SendBlob(ctx, req.(*SendBlobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FixerService_CheckClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FixerServiceServer).CheckClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FixerService_CheckClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FixerServiceServer).CheckClients(ctx, req.(*CheckClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FixerService_ServiceDesc is the grpc.ServiceDesc for FixerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FixerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FixerService",
	HandlerType: (*FixerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakingNewJob",
			Handler:    _FixerService_MakingNewJob_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _FixerService_GetResult_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _FixerService_GetBlob_Handler,
		},
		{
			MethodName: "SendBlob",
			Handler:    _FixerService_SendBlob_Handler,
		},
		{
			MethodName: "CheckClients",
			Handler:    _FixerService_CheckClients_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc/fixer/fixer.proto",
}
